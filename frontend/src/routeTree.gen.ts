/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settingsRoute'
import { Route as RootRouteImport } from './routes/rootRoute'
import { Route as NotFoundRouteImport } from './routes/notFoundRoute'
import { Route as JobsRouteImport } from './routes/jobsRoute'
import { Route as IndexRouteImport } from './routes/indexRoute'
import { Route as DashboardRouteImport } from './routes/dashboardRoute'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settingsRoute',
  path: '/settingsRoute',
  getParentRoute: () => rootRoute,
} as any)

const RootRouteRoute = RootRouteImport.update({
  id: '/rootRoute',
  path: '/rootRoute',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRouteRoute = NotFoundRouteImport.update({
  id: '/notFoundRoute',
  path: '/notFoundRoute',
  getParentRoute: () => rootRoute,
} as any)

const JobsRouteRoute = JobsRouteImport.update({
  id: '/jobsRoute',
  path: '/jobsRoute',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/indexRoute',
  path: '/indexRoute',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboardRoute',
  path: '/dashboardRoute',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboardRoute': {
      id: '/dashboardRoute'
      path: '/dashboardRoute'
      fullPath: '/dashboardRoute'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/indexRoute': {
      id: '/indexRoute'
      path: '/indexRoute'
      fullPath: '/indexRoute'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/jobsRoute': {
      id: '/jobsRoute'
      path: '/jobsRoute'
      fullPath: '/jobsRoute'
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRoute
    }
    '/notFoundRoute': {
      id: '/notFoundRoute'
      path: '/notFoundRoute'
      fullPath: '/notFoundRoute'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRoute
    }
    '/rootRoute': {
      id: '/rootRoute'
      path: '/rootRoute'
      fullPath: '/rootRoute'
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/settingsRoute': {
      id: '/settingsRoute'
      path: '/settingsRoute'
      fullPath: '/settingsRoute'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/dashboardRoute': typeof DashboardRouteRoute
  '/indexRoute': typeof IndexRouteRoute
  '/jobsRoute': typeof JobsRouteRoute
  '/notFoundRoute': typeof NotFoundRouteRoute
  '/rootRoute': typeof RootRouteRoute
  '/settingsRoute': typeof SettingsRouteRoute
}

export interface FileRoutesByTo {
  '/dashboardRoute': typeof DashboardRouteRoute
  '/indexRoute': typeof IndexRouteRoute
  '/jobsRoute': typeof JobsRouteRoute
  '/notFoundRoute': typeof NotFoundRouteRoute
  '/rootRoute': typeof RootRouteRoute
  '/settingsRoute': typeof SettingsRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboardRoute': typeof DashboardRouteRoute
  '/indexRoute': typeof IndexRouteRoute
  '/jobsRoute': typeof JobsRouteRoute
  '/notFoundRoute': typeof NotFoundRouteRoute
  '/rootRoute': typeof RootRouteRoute
  '/settingsRoute': typeof SettingsRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboardRoute'
    | '/indexRoute'
    | '/jobsRoute'
    | '/notFoundRoute'
    | '/rootRoute'
    | '/settingsRoute'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboardRoute'
    | '/indexRoute'
    | '/jobsRoute'
    | '/notFoundRoute'
    | '/rootRoute'
    | '/settingsRoute'
  id:
    | '__root__'
    | '/dashboardRoute'
    | '/indexRoute'
    | '/jobsRoute'
    | '/notFoundRoute'
    | '/rootRoute'
    | '/settingsRoute'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRoute
  IndexRouteRoute: typeof IndexRouteRoute
  JobsRouteRoute: typeof JobsRouteRoute
  NotFoundRouteRoute: typeof NotFoundRouteRoute
  RootRouteRoute: typeof RootRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRoute,
  IndexRouteRoute: IndexRouteRoute,
  JobsRouteRoute: JobsRouteRoute,
  NotFoundRouteRoute: NotFoundRouteRoute,
  RootRouteRoute: RootRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboardRoute",
        "/indexRoute",
        "/jobsRoute",
        "/notFoundRoute",
        "/rootRoute",
        "/settingsRoute"
      ]
    },
    "/dashboardRoute": {
      "filePath": "dashboardRoute.tsx"
    },
    "/indexRoute": {
      "filePath": "indexRoute.tsx"
    },
    "/jobsRoute": {
      "filePath": "jobsRoute.tsx"
    },
    "/notFoundRoute": {
      "filePath": "notFoundRoute.tsx"
    },
    "/rootRoute": {
      "filePath": "rootRoute.tsx"
    },
    "/settingsRoute": {
      "filePath": "settingsRoute.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
